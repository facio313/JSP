<?xml version="1.0" encoding="UTF-8"?>
<b:beans 
	xmlns="http://www.springframework.org/schema/security"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:b="http://www.springframework.org/schema/beans"
	xmlns:c="http://www.springframework.org/schema/c"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-4.2.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

	<!-- = PasswordEncoderFactories.createDelegatingPasswordEncoder(); -->
	<!-- 비밀번호 암호화 -->
	<b:bean id="passwordEncoder" class="org.springframework.security.crypto.factory.PasswordEncoderFactories" 
		factory-method="createDelegatingPasswordEncoder"
	/>
	
	<!-- 사용자 이름과 암호를 인증하기 위해 -->
	<b:bean id="daoAuthenticationProvider" class="org.springframework.security.authentication.dao.DaoAuthenticationProvider"
		p:userDetailsService-ref="userDetailService"
		p:passwordEncoder-ref="passwordEncoder"
		p:hideUserNotFoundExceptions="false"
	 />
	
	<!-- DB에서 불러올 사용자 정보 및 권한 설정 -->
	<authentication-manager id="authenticationManager">
		<authentication-provider ref="daoAuthenticationProvider" />	<!-- 권한 설정할 커스텀 Bean -->
	</authentication-manager>
	
	<!-- auto-config : db자동 연결 -->
	<http auto-config="true">
		<!-- 로그인 -->
		<form-login
			login-page="/login"
			login-processing-url="/login/loginProcess.do"
			username-parameter="memId"
			password-parameter="memPass"
		/>
		
		<!-- 로그아웃 -->
		<logout logout-url="/logout" logout-success-url="/" invalidate-session="true"/>
		
		<!-- 접근권한
			hasRole : 해당 역할만
			isAuthenticated : 로그인한 유저만
			isAnonymous : 비회원, 로그인 하기 전에만
			permitAll : 보안여부 없이 요청 허용(전부)
		 -->
		<intercept-url pattern="/member/memberList.do" access="hasRole('ROLE_ADMIN')"/>
		<intercept-url pattern="/member/memberView.do" access="hasRole('ROLE_ADMIN')"/>
		<intercept-url pattern="/member/memberDelete.do" access="hasRole('ROLE_USER')"/>
		<intercept-url pattern="/member/memberUpdate.do" access="isAuthenticated()"/>
				
		<intercept-url pattern="/mypage.do" access="hasAnyRole('ADMIN', 'USER')"/>
		<intercept-url pattern="/member/memberInsert.do" access="isAnonymous()"/>
		<intercept-url pattern="/login/loginForm.jsp" access="isAnonymous()"/>
		<intercept-url pattern="/login/loginProcess.do" access="isAnonymous()"/>
		<intercept-url pattern="/login/*" access="isAuthenticated()"/>
		<intercept-url pattern="/**" access="permitAll"/>
		
		<!-- 로그인 기억하기 -->
		<remember-me services-ref="rememberMeServices" key="rememberMeKey1"/>
	</http>
	
	<!-- p:createTableOnStartup="true" : 최초 서버 구동시 1회 사용함.-->
	<b:bean id="tokenRepo" class="org.springframework.security.web.authentication.rememberme.JdbcTokenRepositoryImpl" 
		p:dataSource-ref="dataSource"
	/>
	
	<!-- 로그인 기억 쿠키시간 설정 -->
	<b:bean id="rememberMeServices" class="org.springframework.security.web.authentication.rememberme.PersistentTokenBasedRememberMeServices" 
		c:tokenRepository-ref="tokenRepo"
		c:userDetailsService-ref="userDetailService"
		c:key="rememberMeKey1"
		p:parameter="rememberMe"
		p:cookieName="rememberCookie"
		p:tokenValiditySeconds="#{60*60*24*7}"
	/>
	
	<!-- 로그아웃 -->
	<b:bean id="compositeLogoutHandler" class="org.springframework.security.web.authentication.logout.CompositeLogoutHandler">
		<b:constructor-arg name="logoutHandlers">
			<b:array>
				<b:ref bean="rememberMeServices"/>
				<b:bean class="org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler" 
					p:clearAuthentication="true"
					p:invalidateHttpSession="true"
				/>
			</b:array>
		</b:constructor-arg>
	</b:bean>
</b:beans>







