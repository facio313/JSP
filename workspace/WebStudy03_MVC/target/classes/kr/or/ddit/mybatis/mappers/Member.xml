<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.or.ddit.member.dao.MemberDAO">

	<sql id="searchFrag">
		<where>
			<if test="simpleCondition neq null and @org.apache.commons.lang3.StringUtils@isNotBlank(simpleCondition.searchWord)">
				<choose>
					<when test="simpleCondition.searchType eq 'name'">
						INSTR(MEM_NAME, #{simpleCondition.searchWord}) > 0
					</when>
					<when test="simpleCondition.searchType eq 'address'">
						INSTR(MEM_ADD1, #{simpleCondition.searchWord}) > 0
					</when>
					<otherwise>
						INSTR(MEM_NAME, #{simpleCondition.searchWord}) > 0
						OR
						INSTR(MEM_ADD1, #{simpleCondition.searchWord}) > 0
					</otherwise>
				</choose>
			</if>
		</where>
	</sql>

	<select id="selectTotalRecord" resultType="int" parameterType="PagingVO">
		SELECT COUNT(*)
		FROM MEMBER
		<include refid="searchFrag"/>
	</select>
	
	<select id="selectMemberList" resultType="MemberVO" parameterType="PagingVO">
		SELECT B.*
		FROM (
			SELECT A.*, ROWNUM RNUM
			FROM (
				SELECT MEM_ID, MEM_NAME, MEM_MAIL, MEM_HP    
					, MEM_ADD1, MEM_MILEAGE   
					, (SELECT COUNT(DISTINCT CART_PROD) 
						FROM CART 
						WHERE CART_MEMBER = MEM_ID)  CART_COUNT              
				FROM MEMBER
				<include refid="searchFrag"/>
				ORDER BY ROWID ASC
			 ) A
		 ) B
		 <![CDATA[
		 WHERE RNUM >= #{startRow} AND RNUM <= #{endRow}
		 ]]>
	</select>
	
	<resultMap type="MemberVO" id="memberMap" autoMapping="true"> <!-- 반환되는 타입은 리절트타입과 같아야함 -->
		<id property="memId" column="MEM_ID"/> <!-- 식별자로 아이디가 있어야 중복을 제거한다 , 반드시 VO에서 이퀄스 구조가 있어야 가능하다-->
		<!-- 아이디는 오토맵퍼 하면 안된다 -->
		<!--       <result property="memName" column="MEM_NAME"/> -->
		<!--       <result property="memPass" column="MEM_PASS"/> 자동적으로 이름 설정해줌-->
		<!--       <result property="prodList"/> has 매니관게는 이렇게 주면 안된다 -->
		<collection property="prodList" ofType="ProdVO" autoMapping="true"><!-- 하나하나 값을 프로도에서 가져온다 -->
		<!--          <result property="prodName" column="PROD_NAME"/> autoMapping을 넣으면 이 설정이 필요가 없어짐 -->
			<association property="buyer" javaType="BuyerVO" autoMapping="true"><!--  has a 관계, buyer타입이 뭔지 적어줘야함 -->
			<!--          <result property="buyerName" column=""/> -->
			</association>
		</collection>
   </resultMap>
	
	<select id="selectMember" parameterType="String" resultMap="memberMap">
		WITH CARTVIEW AS (
			SELECT DISTINCT CART_MEMBER, CART_PROD
			FROM CART
		), CARTPROD AS (
			SELECT CART_MEMBER
				, PRODVIEW.*
			FROM CARTVIEW INNER JOIN PRODVIEW ON (CART_PROD = PROD_ID)
		)
		SELECT                                                        
		    MEM_ID,    MEM_PASS,    MEM_NAME,                         
		    MEM_REGNO1,    MEM_REGNO2,                                
		    TO_CHAR(MEM_BIR, 'YYYY-MM-DD') MEM_BIR,                   
		    MEM_ZIP,    MEM_ADD1,    MEM_ADD2,                        
		    MEM_HOMETEL,    MEM_COMTEL,    MEM_HP,                    
		    MEM_MAIL,    MEM_JOB,    MEM_LIKE,                        
		    MEM_MEMORIAL,                                             
		    TO_CHAR(MEM_MEMORIALDAY, 'YYYY-MM-DD') MEM_MEMORIALDAY,   
		    MEM_MILEAGE,                                              
		    MEM_DELETE  
		    , MEM_ROLE    
		    , PROD_ID, PROD_NAME, PROD_COST, PROD_PRICE, PROD_MILEAGE
		    , LPROD_NM
		    , BUYER_NAME , BUYER_ADD1, BUYER_CHARGER                                         
		FROM    MEMBER  LEFT OUTER JOIN  CARTPROD  ON (MEM_ID = CART_MEMBER)                               
		WHERE MEM_ID = #{memId}                                              
	</select>
	
	<insert id="insertMember" parameterType="MemberVO">
		INSERT INTO MEMBER (
		    MEM_ID
		    , MEM_PASS
		    , MEM_NAME
		    , MEM_REGNO1
		    , MEM_REGNO2
		    , MEM_BIR
		    , MEM_ZIP
		    , MEM_ADD1
		    , MEM_ADD2
		    , MEM_HOMETEL
		    , MEM_COMTEL
		    , MEM_HP
		    , MEM_MAIL
		    , MEM_JOB
		    , MEM_LIKE
		    , MEM_MEMORIAL
		    , MEM_MEMORIALDAY
		    , MEM_MILEAGE
		    , MEM_DELETE
		) VALUES (
			#{memId,jdbcType=VARCHAR}
			, #{memPass,jdbcType=VARCHAR}
			, #{memName,jdbcType=VARCHAR}
			, #{memRegno1,jdbcType=CHAR}
			, #{memRegno2,jdbcType=CHAR}
			, TO_DATE(#{memBir,jdbcType=DATE}, 'YYYY-MM-DD')
			, #{memZip,jdbcType=CHAR}
			, #{memAdd1,jdbcType=VARCHAR}
			, #{memAdd2,jdbcType=VARCHAR}
			, #{memHometel,jdbcType=VARCHAR}
			, #{memComtel,jdbcType=VARCHAR}
			, #{memHp,jdbcType=VARCHAR}
			, #{memMail,jdbcType=VARCHAR}
			, #{memJob,jdbcType=VARCHAR}
			, #{memLike,jdbcType=VARCHAR}
			, #{memMemorial,jdbcType=VARCHAR}
			, TO_DATE(#{memMemorialday,jdbcType=DATE}, 'YYYY-MM-DD')
			, #{memMileage,jdbcType=NUMERIC}
			, #{memDelete,jdbcType=VARCHAR}
		)
	</insert>
	<update id="updateMember" parameterType="MemberVO">
		UPDATE MEMBER
		SET
			MEM_REGNO1 = #{memRegno1,jdbcType=CHAR}
			, MEM_REGNO2 = #{memRegno2,jdbcType=CHAR}
			, MEM_ZIP = #{memZip,jdbcType=CHAR}
			, MEM_ADD1 = #{memAdd1,jdbcType=VARCHAR}
			, MEM_ADD2 = #{memAdd2,jdbcType=VARCHAR}
			, MEM_HOMETEL = #{memHometel,jdbcType=VARCHAR}
			, MEM_COMTEL = #{memComtel,jdbcType=VARCHAR}
			, MEM_HP = #{memHp,jdbcType=VARCHAR}
			, MEM_MAIL = #{memMail,jdbcType=VARCHAR}
			, MEM_JOB = #{memJob,jdbcType=VARCHAR}
			, MEM_LIKE = #{memLike,jdbcType=VARCHAR}
			, MEM_MEMORIAL = #{memMemorial,jdbcType=VARCHAR}
			, MEM_MEMORIALDAY = TO_DATE(#{memMemorialday,jdbcType=DATE}, 'YYYY-MM-DD')
		WHERE MEM_ID = #{memId}
	</update>
	
	<delete id="deleteMember" parameterType="string">
		UPDATE MEMBER
		SET
		MEM_DELETE = '1'
		WHERE MEM_ID = #{noname}
	</delete>
</mapper>