<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:c="http://www.springframework.org/schema/c"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.3.xsd">
	
	<util:list id="sampleList" list-class="java.util.LinkedList">
		<value>TEXT</value>
		<bean class="java.util.Date"></bean>
	</util:list>
	<!-- 재활용이 가능해진 객체가 되었다-->
	<!-- 이 걸 넣는 순간 빈 등록 -->
	<util:set id="sampleSet" value-type="java.lang.String"><!-- set-class="" 을 생략하면 기본적으로 해시쉿 -->
		<value>setValue1</value>
		<value>setValue2</value>
	</util:set>
	<util:map id="sampleMap" map-class="java.util.LinkedHashMap" key-type="java.lang.String">
		<entry key="KEY1">
			<bean class="java.lang.StringBuffer"></bean><!-- 스트링 버퍼는 기본 생성자를 갖고 있다. 여기에 넣으면 엔트리 하나 생성해준다. -->
		</entry>
		<entry key="KEY2" value="STRVAKYE" />
	</util:map>
	<util:properties id="props">
		<prop key="key1">value1</prop>
		<prop key="key2">value2</prop>
	</util:properties>
	<!-- 배열이 일반적인 컬렉션의 특징은 미리 만들어놓는 타입이라는 게 없다, 배열은 구현체의 형태가 존재하지 않는다. FactoryBean -->
	<!-- FactoryBean을 bean으로 등록한 경우, getObject의 반환 객체가 실제 bean 객체로 등록됨. -->
	<bean id="stringArray" class="kr.or.ddit.di.StringArrayFactoryBean" />
	
	<bean id="colVO4" class="kr.or.ddit.di.CollectionDIVO"
		p:sampleList="#{colVO1.sampleList}"
		p:sampleSet="#{colVO2['sampleSet']}"
		p:sampleMap="#{colVO3.sampleMap}"
		p:props="#{colVO1.props}"
		p:array="#{colVO2.array}"
	/>
	
	<!-- 미션 : 전부다 다른 빈을 복사해서 만든다, 샘플리스트는 VO1번이 있는 걸 복사해서 만들꺼고, 샘플 set은 VO2번, 맵은 VO3번, 셋터인젝션 -->
	<bean id="colVO3" class="kr.or.ddit.di.CollectionDIVO"
		p:sampleList-ref="sampleList"
		p:sampleMap-ref="sampleMap"
		p:sampleSet-ref="sampleSet"
		p:props-ref="props"
		p:array-ref="stringArray"
	/>
	
	<bean id="colVO2" class="kr.or.ddit.di.CollectionDIVO" 
		c:sampleList-ref="sampleList"
		c:sampleSet-ref="sampleSet"
		c:sampleMap-ref="sampleMap"
		c:props-ref="props"
		c:array-ref="stringArray"
	/>
	<!-- scope는 따로 설정하지 않아서 싱글톤인 상태임 -->
	
	
	<bean id="colVO1" class="kr.or.ddit.di.CollectionDIVO">
		<constructor-arg name="sampleList">
			<list>
				<value>TEXT</value>
				<bean class="java.util.Date"></bean>
			</list>
		</constructor-arg>
		<!-- 재활용이 불가능한 임시객체였다 -->
		<constructor-arg name="sampleSet">
			<set>
				<value>setValue1</value>
				<value>setValue2</value>
			</set>
		</constructor-arg>
		<constructor-arg>
			<map>
				<!-- 키 밸류 세트인 엔트리로 받는다 -->
				<entry key="KEY1">
					<bean class="java.lang.StringBuffer"></bean><!-- 스트링 버퍼는 기본 생성자를 갖고 있다. 여기에 넣으면 엔트리 하나 생성해준다. -->
				</entry>
				<entry key="KEY2" value="STRVAKYE" />
			</map>
		</constructor-arg>
		<constructor-arg >
			<props><!-- properties는 문자열밖에 입력 못함 -->
				<prop key="key1">value1</prop>
				<prop key="key2">value2</prop>
			</props>
		</constructor-arg>
		<constructor-arg name="array">
			<array>
				<value>element1</value>
				<value>element2</value>
			</array>
		</constructor-arg>
	</bean>

</beans>
